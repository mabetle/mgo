package mdb

import (
	"fmt"
)

// Create a new row with id
// Table must has ID column
func (s Sql)InitTableRowWithID(table string, id interface{}){
	if !IsValidTableName(table){
		return
	}
	if s.IsTableHasID(table,id){
		logger.Infof("Skip.., row exists. Table:%s ID:%v", table, id)
		return
	}
	q:=fmt.Sprintf("insert into %s (ID) value(?)", table)
	_, err:=s.Exec(q, id)
	CheckErrorWithSucceedMsg(err,"Init row succeed. Table:%s ID:%v", table, id)
}


// Create a new row with Column and Values, other columns use database default value.
// not include id
// id is generated by db UUID
func (s Sql)InitTableRow(table string, columns []string, values ... interface{}){
	if !IsValidTableName(table){
		return
	}
	//if has row
	if s.IsTableHasRowsByColumns(table, columns, values ... ){
		logger.Infof("Skip.., row exists. Table:%s Columns:%v Values:%v", table, columns, values)
		return
	}

	columnHolder :=BuildSelectColumns(columns)
	valueHolder  :=BuildValueHoder(values ...)

	q:=fmt.Sprintf("insert into %s (ID, %s) value(uuid(), %s)", table, columnHolder, valueHolder)
	_, err:=s.Exec(q, values ... )
	CheckErrorWithSucceedMsg(err,"Init row succeed. Table:%s Columns:%v Values:%v", table, columns, values)
}

